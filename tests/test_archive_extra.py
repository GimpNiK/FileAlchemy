import sys
import os
import gzip
import bz2
import tempfile
import shutil
from pathlib import Path

import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))

from FileAlchemy.structures.archive import Archive


def _prep_content(tmp_path: Path):
    files = [
        ("a.txt", "A"),
        ("–∫–∏—Ä–∏–ª–ª–∏—Ü–∞.txt", "–ü—Ä–∏–≤–µ—Ç"),
        ("emojiüòä.txt", "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å —ç–º–æ–¥–∑–∏ üòä"),
        ("Êó•Êú¨Ë™û.txt", "Êó•Êú¨Ë™û„ÅÆÂÜÖÂÆπ"),
    ]
    for n, c in files:
        (tmp_path / n).write_text(c, encoding="utf-8")
    sub = tmp_path / "sub"
    sub.mkdir()
    (sub / "b.txt").write_text("B", encoding="utf-8")
    (sub / "nested").mkdir()
    (sub / "nested" / "deep.txt").write_text("deep content", encoding="utf-8")
    return files, sub


@pytest.mark.parametrize("fmt", ["zip", "7z", "tar", "tar.gz", "tar.bz2"])
def test_iter_equals_list_files(tmp_path: Path, fmt: str):
    files, sub = _prep_content(tmp_path)
    arc = Archive(tmp_path / f"arch.{fmt}", fmt)
    for n, _ in files:
        arc.add(tmp_path / n)
    arc.add(sub)
    assert set(iter(arc)) == set(arc.list_files())


def test_extract_member_not_found_raises(tmp_path: Path):
    arc = Archive(tmp_path / "a.zip", "zip").create()
    with pytest.raises(ValueError):
        arc.extract(member="nope", path=tmp_path / "out")


def test_create_from_validates_format(tmp_path: Path):
    with pytest.raises(NotImplementedError):
        Archive.create_from(tmp_path / "x.xyz", "xyz", files=[])


def test_gz_bz2_support(tmp_path: Path):
    src = tmp_path / "file.bin"
    src.write_bytes(b"data")
    gz = tmp_path / "file.gz"
    with gzip.open(gz, "wb") as f:
        f.write(src.read_bytes())
    bz = tmp_path / "file.bz2"
    with bz2.open(bz, "wb") as f:
        f.write(src.read_bytes())

    for p in [gz, bz]:
        arc = Archive(p)
        out = tmp_path / (p.stem + "_out")
        out.mkdir(exist_ok=True)
        arc.extract(path=out)
        assert (out / "file").exists()


@pytest.mark.parametrize("fmt", ["zip", "7z", "tar", "tar.gz", "tar.bz2"])
def test_archive_roundtrip_with_special_chars(tmp_path: Path, fmt: str):
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Å–æ–∑–¥–∞–Ω–∏–µ ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Üí –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å –æ—Å–æ–±—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏"""
    files, sub = _prep_content(tmp_path)
    arc_path = tmp_path / f"special.{fmt}"
    arc = Archive(arc_path, fmt)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫—É
    for name, _ in files:
        arc.add(tmp_path / name)
    arc.add(sub)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º
    extract_dir = tmp_path / f"extract_{fmt}"
    extract_dir.mkdir(exist_ok=True)
    arc.extract(path=extract_dir)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    for name, content in files:
        extracted_file = extract_dir / name
        assert extracted_file.exists(), f"–§–∞–π–ª {name} –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ {fmt}"
        assert extracted_file.read_text(encoding="utf-8") == content
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert (extract_dir / "sub" / "b.txt").exists()
    assert (extract_dir / "sub" / "nested" / "deep.txt").exists()


@pytest.mark.parametrize("fmt", ["zip", "7z"])
def test_password_protection_detailed(tmp_path: Path, fmt: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞—â–∏—Ç—ã –ø–∞—Ä–æ–ª–µ–º"""
    password = "—Å–µ–∫—Ä–µ—Ç-–ø–∞—Ä–æ–ª—åüòä"
    files, _ = _prep_content(tmp_path)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∞—Ä—Ö–∏–≤
    arc_path = tmp_path / f"protected.{fmt}"
    arc = Archive(arc_path, fmt, password=password)
    
    for name, _ in files:
        arc.add(tmp_path / name)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    extract_dir = tmp_path / f"extract_correct_{fmt}"
    extract_dir.mkdir(exist_ok=True)
    arc_correct = Archive(arc_path, password=password)
    arc_correct.extract(path=extract_dir)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ
    for name, content in files:
        extracted_file = extract_dir / name
        assert extracted_file.exists()
        assert extracted_file.read_text(encoding="utf-8") == content
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –±–µ–∑ –ø–∞—Ä–æ–ª—è
    with pytest.raises(Exception):
        extract_wrong_dir = tmp_path / f"extract_wrong_{fmt}"
        extract_wrong_dir.mkdir(exist_ok=True)
        arc_no_pass = Archive(arc_path)
        arc_no_pass.extract(path=extract_wrong_dir)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º
    with pytest.raises(Exception):
        extract_wrong_dir = tmp_path / f"extract_bad_pass_{fmt}"
        extract_wrong_dir.mkdir(exist_ok=True)
        arc_bad_pass = Archive(arc_path, password="–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")
        arc_bad_pass.extract(path=extract_wrong_dir)


@pytest.mark.parametrize("fmt", ["zip", "7z", "tar", "tar.gz", "tar.bz2"])
def test_large_file_handling(tmp_path: Path, fmt: str):
    """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º 1MB
    large_file = tmp_path / "large.bin"
    with open(large_file, "wb") as f:
        f.write(os.urandom(1024 * 1024))
    
    arc_path = tmp_path / f"large.{fmt}"
    arc = Archive(arc_path, fmt)
    arc.add(large_file)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º
    extract_dir = tmp_path / f"extract_large_{fmt}"
    extract_dir.mkdir(exist_ok=True)
    arc.extract(path=extract_dir)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
    extracted_file = extract_dir / "large.bin"
    assert extracted_file.exists()
    assert extracted_file.stat().st_size == large_file.stat().st_size


@pytest.mark.parametrize("fmt", ["zip", "7z", "tar", "tar.gz", "tar.bz2"])
def test_deep_directory_structure(tmp_path: Path, fmt: str):
    """–¢–µ—Å—Ç –≥–ª—É–±–æ–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    # –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    deep_path = tmp_path / "level1" / "level2" / "level3" / "level4"
    deep_path.mkdir(parents=True, exist_ok=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
    (tmp_path / "level1" / "file1.txt").write_text("level1", encoding="utf-8")
    (tmp_path / "level1" / "level2" / "file2.txt").write_text("level2", encoding="utf-8")
    (deep_path / "file4.txt").write_text("level4", encoding="utf-8")
    
    arc_path = tmp_path / f"deep.{fmt}"
    arc = Archive(arc_path, fmt)
    arc.add(tmp_path / "level1")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º
    extract_dir = tmp_path / f"extract_deep_{fmt}"
    extract_dir.mkdir(exist_ok=True)
    arc.extract(path=extract_dir)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    assert (extract_dir / "level1" / "file1.txt").exists()
    assert (extract_dir / "level1" / "level2" / "file2.txt").exists()
    assert (extract_dir / "level1" / "level2" / "level3" / "level4" / "file4.txt").exists()


@pytest.mark.parametrize("fmt", ["zip", "7z", "tar", "tar.gz", "tar.bz2"])
def test_add_with_custom_arcname(tmp_path: Path, fmt: str):
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –≤ –∞—Ä—Ö–∏–≤–µ"""
    files, _ = _prep_content(tmp_path)
    arc_path = tmp_path / f"custom.{fmt}"
    arc = Archive(arc_path, fmt)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
    for i, (name, _) in enumerate(files):
        arc.add(tmp_path / name, arcname=f"custom_{i}_{name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤–µ
    archive_files = arc.list_files()
    for i, (name, _) in enumerate(files):
        expected_name = f"custom_{i}_{name}"
        assert expected_name in archive_files
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    extract_dir = tmp_path / f"extract_custom_{fmt}"
    extract_dir.mkdir(exist_ok=True)
    arc.extract(path=extract_dir)
    
    for i, (name, content) in enumerate(files):
        extracted_file = extract_dir / f"custom_{i}_{name}"
        assert extracted_file.exists()
        assert extracted_file.read_text(encoding="utf-8") == content


@pytest.mark.parametrize("fmt", ["zip", "7z", "tar", "tar.gz", "tar.bz2"])
def test_extract_specific_members(tmp_path: Path, fmt: str):
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    files, sub = _prep_content(tmp_path)
    arc_path = tmp_path / f"selective.{fmt}"
    arc = Archive(arc_path, fmt)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫—É
    for name, _ in files:
        arc.add(tmp_path / name)
    arc.add(sub, arcname="custom_sub")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª
    extract_dir = tmp_path / f"extract_selective_{fmt}"
    extract_dir.mkdir(exist_ok=True)
    arc.extract(member=files[0][0], path=extract_dir)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–≤–ª–µ—á–µ–Ω —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π —Ñ–∞–π–ª
    assert (extract_dir / files[0][0]).exists()
    for name, _ in files[1:]:
        assert not (extract_dir / name).exists()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞–ø–∫—É
    extract_dir2 = tmp_path / f"extract_folder_{fmt}"
    extract_dir2.mkdir(exist_ok=True)
    arc.extract(member="custom_sub", path=extract_dir2)
    
    assert (extract_dir2 / "custom_sub" / "b.txt").exists()


def test_archive_cleanup_after_operations(tmp_path: Path):
    """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    files, _ = _prep_content(tmp_path)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ tar –∞—Ä—Ö–∏–≤–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for fmt in ["tar", "tar.gz", "tar.bz2"]:
        arc_path = tmp_path / f"cleanup.{fmt}"
        arc = Archive(arc_path, fmt)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã (—Å–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
        for name, _ in files:
            arc.add(tmp_path / name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –æ—á–∏—â–µ–Ω—ã
        temp_dirs = list(tmp_path.glob("~temp_*"))
        assert len(temp_dirs) == 0, f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –æ—á–∏—â–µ–Ω—ã –¥–ª—è {fmt}"


@pytest.mark.parametrize("fmt", ["zip", "7z", "tar", "tar.gz", "tar.bz2"])
def test_empty_archive_operations(tmp_path: Path, fmt: str):
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—É—Å—Ç—ã–º–∏ –∞—Ä—Ö–∏–≤–∞–º–∏"""
    arc_path = tmp_path / f"empty.{fmt}"
    arc = Archive(arc_path, fmt)
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∞—Ä—Ö–∏–≤
    arc.create()
    assert arc_path.exists()
    assert len(arc.list_files()) == 0
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ –ø—É—Å—Ç–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    extract_dir = tmp_path / f"extract_empty_{fmt}"
    extract_dir.mkdir(exist_ok=True)
    arc.extract(path=extract_dir)
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π
    assert len(list(extract_dir.iterdir())) == 0


def test_archive_format_detection():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∞"""
    test_cases = [
        ("test.zip", "zip"),
        ("test.7z", "7z"),
        ("test.tar", "tar"),
        ("test.tar.gz", "tar.gz"),
        ("test.tgz", "tar.gz"),
        ("test.tar.bz2", "tar.bz2"),
        ("test.tbz2", "tar.bz2"),
        ("test.gz", "gz"),
        ("test.bz2", "bz2"),
        ("test.rar", "rar"),
    ]
    
    for filename, expected_format in test_cases:
        arc = Archive(filename)
        assert arc.format == expected_format, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è {filename}"


def test_archive_with_mixed_content_types(tmp_path: Path):
    """–¢–µ—Å—Ç –∞—Ä—Ö–∏–≤–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
    (tmp_path / "text.txt").write_text("–¢–µ–∫—Å—Ç", encoding="utf-8")
    (tmp_path / "binary.bin").write_bytes(b"\x00\x01\x02\x03")
    (tmp_path / "empty.txt").write_text("", encoding="utf-8")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å —Ñ–∞–π–ª–∞–º–∏
    subdir = tmp_path / "mixed"
    subdir.mkdir()
    (subdir / "nested.txt").write_text("–í–ª–æ–∂–µ–Ω–Ω—ã–π", encoding="utf-8")
    (subdir / "nested.bin").write_bytes(b"\xFF\xFE")
    
    for fmt in ["zip", "7z", "tar", "tar.gz", "tar.bz2"]:
        arc_path = tmp_path / f"mixed.{fmt}"
        arc = Archive(arc_path, fmt)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ
        arc.add(tmp_path / "text.txt")
        arc.add(tmp_path / "binary.bin")
        arc.add(tmp_path / "empty.txt")
        arc.add(subdir)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º
        extract_dir = tmp_path / f"extract_mixed_{fmt}"
        extract_dir.mkdir(exist_ok=True)
        arc.extract(path=extract_dir)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        assert (extract_dir / "text.txt").read_text(encoding="utf-8") == "–¢–µ–∫—Å—Ç"
        assert (extract_dir / "binary.bin").read_bytes() == b"\x00\x01\x02\x03"
        assert (extract_dir / "empty.txt").read_text(encoding="utf-8") == ""
        assert (extract_dir / "mixed" / "nested.txt").read_text(encoding="utf-8") == "–í–ª–æ–∂–µ–Ω–Ω—ã–π"
        assert (extract_dir / "mixed" / "nested.bin").read_bytes() == b"\xFF\xFE"


